--- ./build/u-boot-2009.08.01-regigraf/board/freescale/mx51_regigraf/lowlevel_init.S.orig	2012-09-07 13:00:17.000000000 +0400
+++ ./build/u-boot-2009.08.01-regigraf/board/freescale/mx51_regigraf/lowlevel_init.S	2013-06-04 14:19:47.429730997 +0400
@@ -272,10 +272,14 @@
 
 	/* setup the rest */
 	/* Use lp_apm (24MHz) source for perclk */
+	/*ldr r1, =0x000020C2 */         /* original */
+	/* str r1, [r0, #CLKCTL_CBCMR]*/ /* original */
 	ldr r1, =0x000020C2
+	orr r1,r1,#CONFIG_SYS_DDR_CLKSEL
 	str r1, [r0, #CLKCTL_CBCMR]
 	/* ddr clock from PLL 1, all perclk dividers are 1 since using 24MHz */
-	ldr r1, =0x59E35100
+	/* ldr r1, =0x59E35100 */ /* original */
+	ldr r1, =CONFIG_SYS_CLKTL_CBCDR
 	str r1, [r0, #CLKCTL_CBCDR]
 
 	/* Restore the default values in the Gate registers */
--- ./build/u-boot-2009.08.01-regigraf/drivers/mmc/imx_esdhc.c.orig	2012-09-07 13:00:15.000000000 +0400
+++ ./build/u-boot-2009.08.01-regigraf/drivers/mmc/imx_esdhc.c	2013-05-30 11:04:09.000000000 +0400
@@ -488,10 +488,11 @@
 		tmp = readl(&regs->proctl) | PROCTL_DTW_8;
 		writel(tmp, &regs->proctl);
 	}
-
+#ifndef CONFIG_MXC_REGIGRAF_MMC
 	if (mmc->card_caps & EMMC_MODE_4BIT_DDR ||
 		mmc->card_caps & EMMC_MODE_8BIT_DDR)
 		esdhc_dll_setup(mmc);
+#endif
 }
 
 static int esdhc_init(struct mmc *mmc)
--- ./build/u-boot-2009.08.01-regigraf/drivers/mtd/nand/mxc_nand.c.orig	2012-09-07 13:00:15.000000000 +0400
+++ ./build/u-boot-2009.08.01-regigraf/drivers/mtd/nand/mxc_nand.c	2013-06-17 14:14:07.919636022 +0400
@@ -36,6 +36,43 @@
  */
 #define TROP_US_DELAY   2000
 
+#ifdef CONFIG_MXC_REGIGRAF_NAND
+/* Regigraf board */
+#define CLEAR_BITS(out, mask, offs) (out & ~(mask << offs))
+#define CHANGE_REG(getter, setter, mask, offs, value) \
+	setter(CLEAR_BITS(getter, mask, offs) | ((value) << offs))
+
+#define MXC_NFC_CFG_2          NFC_CONFIG2
+#define MXC_NFC_CFG_2_GET      __raw_readl(MXC_NFC_CFG_2)
+#define MXC_NFC_CFG_2_SET(val) __raw_writel(val, MXC_NFC_CFG_2)
+#define MXC_NFC_CFG_2_UP(mask, offs, val) \
+	CHANGE_REG(MXC_NFC_CFG_2_GET, MXC_NFC_CFG_2_SET, mask, offs, val)
+
+#define MXC_NFC_CFG_3          NFC_CONFIG3
+#define MXC_NFC_CFG_3_GET      __raw_readl(MXC_NFC_CFG_3)
+#define MXC_NFC_CFG_3_SET(val) __raw_writel(val, MXC_NFC_CFG_3)
+#define MXC_NFC_CFG_3_UP(mask, offs, val) \
+	CHANGE_REG(MXC_NFC_CFG_3_GET, MXC_NFC_CFG_3_SET, mask, offs, val)
+
+#define MXC_NFC_SPAS(val)           MXC_NFC_CFG_2_UP(0xFF, 16, val / 2)
+#define MXC_NFC_ADR_PHASES1(val)    MXC_NFC_CFG_2_UP(0x3,  12, val - 3)
+#define MXC_NFC_PPB(val)            MXC_NFC_CFG_2_UP(0x3,  7,  val)
+#define MXC_NFC_ECC_MODE(val)       MXC_NFC_CFG_2_UP(0x1,  6,  (val / 4) - 1)
+#define MXC_NFC_ADR_PHASES0(val)    MXC_NFC_CFG_2_UP(0x1,  5,  val - 1)
+#define MXC_NFC_CMD_PHASES(val)     MXC_NFC_CFG_2_UP(0x1,  4,  val - 1)
+#define MXC_NFC_ECC_EN(val)         MXC_NFC_CFG_2_UP(0x1,  3,  val)
+#define MXC_NFC_SYM(val)            MXC_NFC_CFG_2_UP(0x1,  2,  val)
+#define MXC_NFC_PS(val)             MXC_NFC_CFG_2_UP(0x3,  0,  val)
+
+#define MXC_NFC_RBB_MODE(val)       MXC_NFC_CFG_3_UP(0x1,  15, val)
+#define MXC_NFC_NUM_OF_DEVICES(val) MXC_NFC_CFG_3_UP(0x7,  12, val - 1)
+#define MXC_NFC_SBB(val)            MXC_NFC_CFG_3_UP(0x7,  8,  val)
+#define MXC_NFC_SB2R(val)           MXC_NFC_CFG_3_UP(0x7,  4,  val)
+#define MXC_NFC_FW(val)             MXC_NFC_CFG_3_UP(0x1,  3,  (16 / val) - 1)
+#define MXC_NFC_TOO(val)            MXC_NFC_CFG_3_UP(0x1,  2,  val - 1)
+#define MXC_NFC_ADD_OP(val)         MXC_NFC_CFG_3_UP(0x3,  0,  val)
+
+#endif
 /*
  * OOB placement block for use with hardware ecc generation
  */
@@ -57,6 +94,9 @@
 	.oobfree = {{2, 4} }
 };
 
+/* FIXIT: Regigraf board debug functions */
+static u8 select_dev_lun(struct mtd_info *mtd, u32 page_addr);
+/* ------------------------------------- */
 
 static void mxc_nand_bi_swap(struct mtd_info *mtd)
 {
@@ -548,6 +588,39 @@
 
 }
 
+/* FIXIT: Regigraf board debug functions */
+static void configure_auto_cmd(void)
+{
+	raw_write(raw_read(NFC_CONFIG1) & ~(0xF << 8), NFC_CONFIG1); // execute automatic operation 1 time
+	raw_write(raw_read(NFC_CONFIG1) & ~(7 << 4),   NFC_CONFIG1); // Ram Buffer Address 0
+	raw_write(raw_read(NFC_CONFIG1) & ~(1 << 1),   NFC_CONFIG1); // CE# signal operates normally
+	raw_write(raw_read(NFC_CONFIG1) & ~1,          NFC_CONFIG1); // Program/read main and spare area
+}
+
+static u8 select_dev_lun(struct mtd_info *mtd, u32 page_addr)
+{
+	u16 lun_id;
+	u8  ret;
+	if (page_addr < (1024 * 1024 * 1024)) // 8Gb => 1GB => 0 LUN
+		lun_id = 0;
+	else
+		lun_id = 1;
+	/* sending READ STATUS ENHANCED command to select LUN */
+	send_cmd_atomic(mtd, 0x78);
+	/* fill address */
+	send_addr(0x00); // page
+	send_addr(0x00); // block
+	send_addr(lun_id); // LUN
+	/* transfer data from nand */
+	configure_auto_cmd();
+	raw_write(NFC_OUTPUT, REG_NFC_OPS); // One page data out
+	wait_op_done(TROP_US_DELAY);
+	/* reading status */
+	ret = *((u8*)MAIN_AREA0);
+	return ret;
+}
+/* ------------------------------------- */
+
 static u16 mxc_do_status_auto(struct mtd_info *mtd)
 {
 	u16 status = 0;
@@ -634,7 +707,7 @@
 
 static void mxc_nand_enable_hwecc(struct mtd_info *mtd, int mode)
 {
-	raw_write((raw_read(REG_NFC_ECC_EN) | NFC_ECC_EN), REG_NFC_ECC_EN);
+//	raw_write((raw_read(REG_NFC_ECC_EN) | NFC_ECC_EN), REG_NFC_ECC_EN); // FIXIT
 	return;
 }
 
@@ -890,15 +963,18 @@
 	 */
 	switch (command) {
 	case NAND_CMD_STATUS:
+		select_dev_lun(mtd, page_addr); // FIXIT
 		info->col_addr = 0;
 		info->status_req = 1;
 		break;
 
 	case NAND_CMD_READ0:
+		select_dev_lun(mtd, page_addr); // FIXIT
 		info->col_addr = column;
 		break;
 
 	case NAND_CMD_READOOB:
+		select_dev_lun(mtd, page_addr); // FIXIT
 		info->col_addr = column;
 		command = NAND_CMD_READ0;
 		break;
@@ -939,6 +1015,8 @@
 		break;
 
 	case NAND_CMD_ERASE1:
+		select_dev_lun(mtd, page_addr); // FIXIT
+		break;
 	case NAND_CMD_ERASE2:
 		break;
 	}
@@ -1119,7 +1197,8 @@
 	.offs = 0,
 	.len = 4,
 	.veroffs = 4,
-	.maxblocks = 4,
+//	.maxblocks = 4, // FIXIT
+	.maxblocks = 8,
 	.pattern = bbt_pattern
 };
 
@@ -1129,7 +1208,8 @@
 	.offs = 0,
 	.len = 4,
 	.veroffs = 4,
-	.maxblocks = 4,
+//	.maxblocks = 4, // FIXIT
+	.maxblocks = 8,
 	.pattern = mirror_pattern
 };
 
@@ -1246,7 +1326,28 @@
 	raw_write(NFC_SET_WPC(NFC_WPC_UNLOCK), REG_NFC_WPC);
 #endif
 	/* Enable hw ecc */
-	raw_write((raw_read(REG_NFC_ECC_EN) | NFC_ECC_EN), REG_NFC_ECC_EN);
+//	raw_write((raw_read(REG_NFC_ECC_EN) | NFC_ECC_EN), REG_NFC_ECC_EN); // FIXIT
+#ifdef CONFIG_MXC_REGIGRAF_NAND
+	/* Regigraf board NFC configuration */
+	MXC_NFC_CFG_3_UP(0x1, 20, 1); // SDMA is not in being used for NFC operations
+	MXC_NFC_SPAS(218);     // 218 Spare size
+	MXC_NFC_PPB(1);        // 64 pages per block
+	MXC_NFC_ECC_MODE(8);   // set 8bit ECC
+	MXC_NFC_ECC_EN(0);     // disable ECC
+//	MXC_NFC_ECC_EN(1);     // enable ECC
+	MXC_NFC_SYM(0);        // set 2 clock per RE#WE# (asymmetric RE waveform)
+	MXC_NFC_PS(3);         // set 4KB page (11)
+	MXC_NFC_RBB_MODE(1);       // NFC monitors ready-busy status by checking ipp_nfc_rbbX signals
+	MXC_NFC_NUM_OF_DEVICES(1); // Num Of Devices: 1 dev
+	MXC_NFC_SBB(6);            // set READY bit 6 in status
+	MXC_NFC_SB2R(0);           // set FAIL bit 0 in status
+	MXC_NFC_FW(8);             // Nand Flash IO width: 8bit
+	MXC_NFC_TOO(1);            // Only 1 device is connected to all CS lines
+	MXC_NFC_ADD_OP(1);         // use only address group NAND_ADD[0-8] will only use one NAND
+	MXC_NFC_ADR_PHASES1(5);    // 5 phases during read/program oeprations
+	MXC_NFC_ADR_PHASES0(2);    // 2 phases less then NUM_ADR_PHASES1 (during an AUTO_ERASE operation)
+	MXC_NFC_CMD_PHASES(2);     // 2 command phases for reading a page (read command & read-confirm command)
+#endif
 }
 
 static int mxc_alloc_buf(struct nand_info *info)
@@ -1329,8 +1430,13 @@
 	this->ecc.hwctl = mxc_nand_enable_hwecc;
 	this->ecc.layout = &nand_hw_eccoob_512;
 	this->ecc.mode = NAND_ECC_HW;
+#ifdef CONFIG_MXC_REGIGRAF_NAND
+	this->ecc.bytes = 9;
+	this->ecc.size = 512;
+#else
 	this->ecc.bytes = 9;
 	this->ecc.size = 512;
+#endif
 
 #ifdef CONFIG_NAND_FW_16BIT
 	if (CONFIG_NAND_FW_16BIT == 1) {
--- ./build/u-boot-2009.08.01-regigraf/include/configs/mx51_regigraf.h.orig	2013-06-19 12:31:44.098854240 +0400
+++ ./build/u-boot-2009.08.01-regigraf/include/configs/mx51_regigraf.h	2013-06-17 16:45:24.269826771 +0400
@@ -0,0 +1,345 @@
+/*
+ * Copyright (C) 2007, Guennadi Liakhovetski <lg@denx.de>
+ *
+ * (C) Copyright 2009-2011 Freescale Semiconductor, Inc.
+ *
+ * Configuration settings for the MX51-3Stack Freescale board.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <asm/arch/mx51.h>
+
+ /* High Level Configuration Options */
+#define CONFIG_ARMV7		1	/* This is armv7 Cortex-A8 CPU core */
+
+#define CONFIG_MXC		1
+#define CONFIG_MX51_BBG		1	/* in a mx51 */
+#define CONFIG_FLASH_HEADER	1
+#define CONFIG_FLASH_HEADER_OFFSET 0x400
+#define CONFIG_FLASH_HEADER_BARKER 0xB1
+
+#define CONFIG_SKIP_RELOCATE_UBOOT
+
+#define CONFIG_MX51_HCLK_FREQ	24000000	/* RedBoot says 26MHz */
+
+#define CONFIG_ARCH_CPU_INIT
+#define CONFIG_ARCH_MMU
+
+#define CONFIG_DISPLAY_CPUINFO
+#define CONFIG_DISPLAY_BOARDINFO
+
+#define CONFIG_SYS_64BIT_VSPRINTF
+
+#define BOARD_LATE_INIT
+/*
+ * Disabled for now due to build problems under Debian and a significant
+ * increase in the final file size: 144260 vs. 109536 Bytes.
+ */
+
+#define CONFIG_CMDLINE_TAG		1	/* enable passing of ATAGs */
+#define CONFIG_REVISION_TAG		1
+#define CONFIG_SETUP_MEMORY_TAGS	1
+#define CONFIG_INITRD_TAG		1
+
+/*
+ * Size of malloc() pool
+ */
+#define CONFIG_SYS_MALLOC_LEN		(3 * 1024 * 1024)
+/* size in bytes reserved for initial data */
+#define CONFIG_SYS_GBL_DATA_SIZE	128
+
+/*
+ * PLL clocks
+ */
+#define CONFIG_SYS_DDR_CLKSEL	0x0 /* Default setting: 0x0 */
+#define CONFIG_SYS_CLKTL_CBCDR 0x59E35100 /* Default setting: 0x59E35100 */
+
+/*
+ * Hardware drivers
+ */
+#define CONFIG_MXC_UART 1
+#define CONFIG_UART_BASE_ADDR   UART1_BASE_ADDR
+
+/* allow to overwrite serial and ethaddr */
+#define CONFIG_ENV_OVERWRITE
+#define CONFIG_CONS_INDEX		1
+#define CONFIG_BAUDRATE			115200
+#define CONFIG_SYS_BAUDRATE_TABLE	{9600, 19200, 38400, 57600, 115200}
+
+/***********************************************************
+ * Command definition
+ ***********************************************************/
+
+#include <config_cmd_default.h>
+
+//#define CONFIG_CMD_PING
+//#define CONFIG_CMD_DHCP
+//#define CONFIG_BOOTP_SUBNETMASK
+//#define CONFIG_BOOTP_GATEWAY
+//#define CONFIG_BOOTP_DNS
+#define CONFIG_CMD_MII
+#define CONFIG_CMD_NET
+//#define CONFIG_NET_RETRY_COUNT	100
+#define CONFIG_CMD_SPI
+#define CONFIG_CMD_SF
+#define CONFIG_CMD_MMC
+//#define CONFIG_CMD_IIM
+//#define CONFIG_CMD_I2C
+#define CONFIG_CMD_NAND
+
+//#define CONFIG_CMD_CLOCK
+//#define CONFIG_REF_CLK_FREQ CONFIG_MX51_HCLK_FREQ
+
+/*
+ * FUSE Configs
+ */
+#ifdef CONFIG_CMD_IIM
+	#define CONFIG_IMX_IIM
+	#define IMX_IIM_BASE        IIM_BASE_ADDR
+	#define CONFIG_IIM_MAC_BANK 1
+	#define CONFIG_IIM_MAC_ROW  9
+#endif
+
+/*
+ * SPI Configs
+ */
+#ifdef CONFIG_CMD_SF
+//	#define CONFIG_SPI_FLASH
+	#define CONFIG_FSL_SF              1
+	#define CONFIG_SPI_FLASH_IMX_ATMEL 1
+	#define CONFIG_SPI_FLASH_CS        1
+	#define CONFIG_IMX_ECSPI
+	#define IMX_CSPI_VER_2_3           1
+	#define CONFIG_IMX_SPI_PMIC
+	#define CONFIG_IMX_SPI_PMIC_CS     0
+	#define MAX_SPI_BYTES              (64 * 4)
+#endif
+
+/*
+ * MMC Configs
+ */
+#ifdef CONFIG_CMD_MMC
+	#define CONFIG_MMC                1
+	#define CONFIG_GENERIC_MMC
+	#define CONFIG_IMX_MMC
+	#define CONFIG_SYS_FSL_ESDHC_NUM  1
+	#define CONFIG_SYS_FSL_ESDHC_ADDR 0
+	#define CONFIG_SYS_MMC_ENV_DEV    0
+	#define CONFIG_DOS_PARTITION      1
+	#define CONFIG_CMD_FAT            1
+	#define CONFIG_MXC_REGIGRAF_MMC
+//	#define CONFIG_DYNAMIC_MMC_DEVNO
+#endif
+
+/*
+ * I2C Configs
+ */
+#ifdef CONFIG_CMD_I2C
+	#define CONFIG_HARD_I2C         1
+	#define CONFIG_I2C_MXC          1
+	#define CONFIG_SYS_I2C_PORT             I2C1_BASE_ADDR
+	#define CONFIG_SYS_I2C_SPEED            400000
+	#define CONFIG_SYS_I2C_SLAVE            0xfe
+#endif
+
+/*
+ * Eth Configs
+ */
+#ifdef CONFIG_CMD_NET
+	#define CONFIG_HAS_ETH1
+	#define CONFIG_NET_MULTI 1
+	#define CONFIG_MXC_FEC
+	#define CONFIG_MII
+	#define CONFIG_DISCOVER_PHY
+
+	#define CONFIG_GET_FEC_MAC_ADDR_FROM_IIM
+	#define CONFIG_IIM_MAC_ADDR_OFFSET      0x24
+
+	#define CONFIG_FEC0_IOBASE	FEC_BASE_ADDR
+	#define CONFIG_FEC0_PINMUX	-1
+	#define CONFIG_FEC0_PHY_ADDR	0x1F
+	#define CONFIG_FEC0_MIIBASE 	-1
+	#define CONFIG_FEC_STATIC_MAC_ADDR {0x00, 0x00, 0x00, 0x00, 0x00, 0x01}
+#endif
+
+/*
+ * NAND Configs
+ */
+#ifdef CONFIG_CMD_NAND
+	#define CONFIG_MXC_NAND
+	#define CONFIG_MXC_NFC_SP_AUTO
+	#define CONFIG_MXC_REGIGRAF_NAND
+	#define CONFIG_SYS_NAND_LARGEPAGE
+	#define CONFIG_MTD_DEVICE
+	/* NAND FLASH driver setup */
+	#define NAND_MAX_CHIPS             1
+	#define CONFIG_SYS_NAND_MAX_CHIPS  1
+	#define CONFIG_SYS_MAX_NAND_DEVICE 1
+	#define CONFIG_SYS_NAND_BASE       0x40000000
+#endif
+
+/*
+ * Framebuffer and LCD
+ */
+#ifdef CONFIG_SPLASH_SCREEN
+	#define CONFIG_LCD
+	#define CONFIG_VIDEO_MX5
+	#define CONFIG_MXC_HSC
+	#define CONFIG_IPU_CLKRATE	133000000
+	#define CONFIG_SYS_CONSOLE_ENV_OVERWRITE
+	#define CONFIG_SYS_CONSOLE_OVERWRITE_ROUTINE
+	#define CONFIG_SYS_CONSOLE_IS_IN_ENV
+	#define LCD_BPP		LCD_COLOR16
+	#define CONFIG_CMD_BMP
+	#define CONFIG_BMP_8BPP
+	#define CONFIG_FB_BASE	(TEXT_BASE + 0x300000)
+	#define CONFIG_SPLASH_SCREEN_ALIGN
+	#define CONFIG_SYS_WHITE_ON_BLACK
+#endif
+
+/* Enable below configure when supporting nand */
+#define CONFIG_CMD_ENV
+
+#undef CONFIG_CMD_IMLS
+
+#define CONFIG_BOOTDELAY	3
+
+#define CONFIG_PRIME	"FEC0"
+
+#define CONFIG_LOADADDR		0x90800000	/* loadaddr env var */
+
+#define	CONFIG_EXTRA_ENV_SETTINGS					\
+		"netdev=eth0\0"						\
+		"ethprime=FEC0\0"					\
+		"uboot_addr=0xa0000000\0"				\
+		"uboot=u-boot.bin\0"			\
+		"kernel=uImage\0"				\
+		"mmcdev=0\0" \
+		"mmcroot=/dev/mmcblk0p2 rw\0" \
+		"mmcrootfstype=ext2\0" \
+		"mtddev=ubi.mtd=1\0" \
+		"nandroot=ubi0:nandfs rw\0" \
+		"nandrootfstype=ubifs\0" \
+		"video=mxcdi1fb:RGB565,CLAA-WVGA di1_primary\0" \
+		"bootargs_base=setenv bootargs console=ttymxc0,115200\0"\
+		"bootargs_nfs=setenv bootargs ${bootargs} root=/dev/nfs "\
+			"ip=dhcp nfsroot=${serverip}:${nfsroot},v3,tcp\0"\
+		"bootargs_mmc=setenv bootargs console=ttymxc0,115200 ${bootargs} root=${mmcroot} "\
+		  "rootfstype=${mmcrootfstype} rootwait video=${video} consoleblank=0\0" \
+		"bootargs_nand=setenv bootargs ${bootargs} ${mtddev} root=${nandroot} "\
+		  "rootfstype=${nandrootfstype} rootwait video=${video} consoleblank=0\0" \
+		"bootcmd_net=run bootargs_base bootargs_nfs; "		\
+			"tftpboot ${loadaddr} ${kernel}; bootm\0"	\
+		"bootcmd_mmc=mmc rescan; run bootargs_mmc; "		\
+			"fatload mmc ${mmcdev} ${loadaddr} ${kernel}; bootm\0"	\
+		"bootcmd_nand=mmc rescan; run bootargs_base bootargs_nand; "		\
+			"fatload mmc ${mmcdev} ${loadaddr} ${kernel}; bootm\0"	\
+		"load_uboot=tftpboot ${loadaddr} ${uboot}\0"		\
+		"bootcmd=run bootcmd_mmc\0"				\
+
+//		"bootcmd=run bootcmd_net\0"
+
+/*
+ * The MX51 3stack board seems to have a hardware "peculiarity" confirmed under
+ * U-Boot, RedBoot and Linux: the ethernet Rx signal is reaching the CS8900A
+ * controller inverted. The controller is capable of detecting and correcting
+ * this, but it needs 4 network packets for that. Which means, at startup, you
+ * will not receive answers to the first 4 packest, unless there have been some
+ * broadcasts on the network, or your board is on a hub. Reducing the ARP
+ * timeout from default 5 seconds to 200ms we speed up the initial TFTP
+ * transfer, should the user wish one, significantly.
+ */
+#define CONFIG_ARP_TIMEOUT	200UL
+
+/*
+ * Miscellaneous configurable options
+ */
+#define CONFIG_SYS_LONGHELP		/* undef to save memory */
+#define CONFIG_SYS_PROMPT		"Regigraf U-Boot > "
+#define CONFIG_AUTO_COMPLETE
+#define CONFIG_SYS_CBSIZE		256	/* Console I/O Buffer Size */
+/* Print Buffer Size */
+#define CONFIG_SYS_PBSIZE (CONFIG_SYS_CBSIZE + sizeof(CONFIG_SYS_PROMPT) + 16)
+#define CONFIG_SYS_MAXARGS	16	/* max number of command args */
+#define CONFIG_SYS_BARGSIZE CONFIG_SYS_CBSIZE /* Boot Argument Buffer Size */
+
+#define CONFIG_SYS_MEMTEST_START	0x0	/* memtest works on */ /* old value: 0 */
+#define CONFIG_SYS_MEMTEST_END		0x10000
+
+//#undef	CONFIG_SYS_CLKS_IN_HZ		/* everything, incl board info, in Hz */
+
+#define CONFIG_SYS_LOAD_ADDR		CONFIG_LOADADDR
+
+#define CONFIG_SYS_HZ				1000
+
+#define CONFIG_CMDLINE_EDITING	1
+
+/*-----------------------------------------------------------------------
+ * Stack sizes
+ *
+ * The stack sizes are set up in start.S using the settings below
+ */
+#define CONFIG_STACKSIZE	(128 * 1024)	/* regular stack */
+
+/*-----------------------------------------------------------------------
+ * Physical Memory Map
+ */
+#define CONFIG_NR_DRAM_BANKS	1
+#define PHYS_SDRAM_1		CSD0_BASE_ADDR
+#define PHYS_SDRAM_1_SIZE	(512 * 1024 * 1024)
+#define iomem_valid_addr(addr, size) \
+	(addr >= PHYS_SDRAM_1 && addr <= (PHYS_SDRAM_1 + PHYS_SDRAM_1_SIZE))
+
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CONFIG_SYS_NO_FLASH
+
+#define CONFIG_ENV_SECT_SIZE    (8 * 1024)
+#define CONFIG_ENV_SIZE         CONFIG_ENV_SECT_SIZE
+
+/* Monitor at beginning of flash */
+/* #define CONFIG_FSL_ENV_IN_SF */
+#define CONFIG_FSL_ENV_IN_SF
+/* Example: CONFIG_ENV_IS_IN_{NVRAM|EEPROM|FLASH|DATAFLASH|ONENAND|SPI_FLASH|SATA|MMC|MG_DISK|NOWHERE} */
+#if defined(CONFIG_FSL_ENV_IN_NAND)
+	#define CONFIG_ENV_IS_IN_NAND  1
+	#define CONFIG_ENV_OFFSET      0x100000
+#elif defined(CONFIG_FSL_ENV_IN_MMC)
+	#define CONFIG_ENV_IS_IN_MMC 1
+	#define CONFIG_ENV_OFFSET    (768 * 1024)
+#elif defined(CONFIG_FSL_ENV_IN_SF)
+	#define CONFIG_ENV_IS_IN_SPI_FLASH 1
+//	#define CONFIG_ENV_IS_EMBEDDED     1
+	#define CONFIG_ENV_SPI_MAX_HZ      25000000
+	#define CONFIG_ENV_SPI_CS          1
+	#define CONFIG_ENV_OFFSET          0x100000
+//	#define CONFIG_ENV_OFFSET          (768 * 1024)
+#else
+	#define CONFIG_ENV_IS_NOWHERE1
+#endif
+
+/*
+ * JFFS2 partitions
+ */
+#undef CONFIG_JFFS2_CMDLINE
+//#define CONFIG_JFFS2_DEV	"nand0"
+
+#endif				/* __CONFIG_H */
