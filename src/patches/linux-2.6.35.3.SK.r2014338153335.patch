--- ./build/linux-2.6.35.3.SK/drivers/hwmon/lm92.c.orig	2010-08-20 22:55:55.000000000 +0400
+++ ./build/linux-2.6.35.3.SK/drivers/hwmon/lm92.c	2014-11-29 09:43:48.533151328 +0300
@@ -116,7 +116,7 @@
 
 	if (time_after(jiffies, data->last_updated + HZ)
 	 || !data->valid) {
-		dev_dbg(&client->dev, "Updating lm92 data\n");
+//		dev_dbg(&client->dev, "Updating lm92 data\n");
 		data->temp1_input = swab16(i2c_smbus_read_word_data(client,
 				    LM92_REG_TEMP));
 		data->temp1_hyst = swab16(i2c_smbus_read_word_data(client,
--- ./build/linux-2.6.35.3.SK/drivers/rtc/rtc-ds1307.c.orig	2014-07-31 14:58:08.000000000 +0400
+++ ./build/linux-2.6.35.3.SK/drivers/rtc/rtc-ds1307.c	2014-12-04 15:32:47.807099502 +0300
@@ -120,6 +120,8 @@
   int               temperature;
   wait_queue_head_t wqueue;
   struct mutex      poll_mutex;
+  struct rtc_time   new_tm;
+  bool              set_new_tm;
 #endif
 #define HAS_NVRAM	0		/* bit 0 == sysfs file active */
 #define HAS_ALARM	1		/* bit 1 == irq claimed */
@@ -178,6 +180,18 @@
 
 #define BLOCK_DATA_MAX_TRIES 10
 
+static void ds3231_enable_alarm_int(struct i2c_client *client)
+{
+  const u8 ctl_val = DS1337_BIT_INTCN | DS1337_BIT_A1IE | DS3231_BIT_BBSQW;
+	i2c_smbus_write_byte_data(client, DS1337_REG_CONTROL, ctl_val);
+}
+
+static void ds3231_disable_alarm_int(struct i2c_client *client)
+{
+  const u8 ctl_val = DS3231_BIT_BBSQW;
+	i2c_smbus_write_byte_data(client, DS1337_REG_CONTROL, ctl_val);
+}
+
 static s32 ds1307_read_block_data_once(struct i2c_client *client, u8 command,
 				  u8 length, u8 *values)
 {
@@ -318,7 +332,9 @@
 }
 
 /*----------------------------------------------------------------------*/
-
+#ifdef DS3231MZ_IRQ_POLL
+int ds1307_set_time(struct device *dev, struct rtc_time *t);
+#endif
 static int ds1307_get_time(struct device *dev, struct rtc_time *t)
 {
 	struct ds1307	*ds1307 = dev_get_drvdata(dev);
@@ -332,30 +348,53 @@
 #else
   const int kBlockSize = 7;
 #endif
+
+#ifdef DS3231MZ_IRQ_POLL
+  int err;
+  if (ds1307->set_new_tm) {
+    err = ds1307_set_time(dev, &ds1307->new_tm);
+    ds1307->set_new_tm = false;
+  } else {
+	  /* read the RTC date and time registers all at once */
+	  tmp = ds1307->read_block_data(ds1307->client,
+		  ds1307->offset, kBlockSize, ds1307->regs);
+	  if (tmp != kBlockSize) {
+		  dev_err(dev, "%s error %d\n", "read", tmp);
+    	err = -EIO;
+    }  
+  }
+  if (err != 0) {
+    if (ds1307->irq_poll)
+      mutex_unlock(&ds1307->poll_mutex);
+    return err;
+  }
+#else
 	/* read the RTC date and time registers all at once */
 	tmp = ds1307->read_block_data(ds1307->client,
 		ds1307->offset, kBlockSize, ds1307->regs);
 	if (tmp != kBlockSize) {
 		dev_err(dev, "%s error %d\n", "read", tmp);
-#ifdef DS3231MZ_IRQ_POLL
-    if (ds1307->irq_poll)
-      mutex_unlock(&ds1307->poll_mutex);
+  	return -EIO;
+  }
 #endif
-		return -EIO;
-	}
+
 #ifdef DS3231MZ_IRQ_POLL
   ds1307->temperature = (ds1307->regs[DS3231MZ_REG_TEMP_MSB] << 2) |
                          ((ds1307->regs[DS3231MZ_REG_TEMP_LSB] >> 6) & 0x3);
   if (ds1307->irq_poll)
     mutex_unlock(&ds1307->poll_mutex);
 #endif
+/*
 	dev_dbg(dev, "%s: %02x %02x %02x %02x %02x %02x %02x\n",
 			"read",
 			ds1307->regs[0], ds1307->regs[1],
 			ds1307->regs[2], ds1307->regs[3],
 			ds1307->regs[4], ds1307->regs[5],
 			ds1307->regs[6]);
-
+*/
+#ifdef DS3231MZ_IRQ_POLL
+  if (ds1307->set_new_tm == false) {
+#endif
 	t->tm_sec = bcd2bin(ds1307->regs[DS1307_REG_SECS] & 0x7f);
 	t->tm_min = bcd2bin(ds1307->regs[DS1307_REG_MIN] & 0x7f);
 	tmp = ds1307->regs[DS1307_REG_HOUR] & 0x3f;
@@ -367,17 +406,24 @@
 
 	/* assume 20YY not 19YY, and ignore DS1337_BIT_CENTURY */
 	t->tm_year = bcd2bin(ds1307->regs[DS1307_REG_YEAR]) + 100;
-
+#ifdef DS3231MZ_IRQ_POLL
+  }
+#endif
+/*
 	dev_dbg(dev, "%s secs=%d, mins=%d, "
 		"hours=%d, mday=%d, mon=%d, year=%d, wday=%d\n",
 		"read", t->tm_sec, t->tm_min,
 		t->tm_hour, t->tm_mday,
 		t->tm_mon, t->tm_year, t->tm_wday);
+*/
 	/* initial clock setting can be undefined */
 	return rtc_valid_tm(t);
 }
-
+#ifdef DS3231MZ_IRQ_POLL
+int ds1307_set_time(struct device *dev, struct rtc_time *t)
+#else
 static int ds1307_set_time(struct device *dev, struct rtc_time *t)
+#endif
 {
 	struct ds1307	*ds1307 = dev_get_drvdata(dev);
 	int		result;
@@ -418,16 +464,8 @@
 	dev_dbg(dev, "%s: %02x %02x %02x %02x %02x %02x %02x\n",
 		"write", buf[0], buf[1], buf[2], buf[3],
 		buf[4], buf[5], buf[6]);
-#ifdef DS3231MZ_IRQ_POLL
-  if (ds1307->irq_poll)
-    mutex_lock(&ds1307->poll_mutex);
-#endif
 	result = ds1307->write_block_data(ds1307->client,
 		ds1307->offset, 7, buf);
-#ifdef DS3231MZ_IRQ_POLL
-  if (ds1307->irq_poll)
-    mutex_unlock(&ds1307->poll_mutex);
-#endif
 	if (result < 0) {
 		dev_err(dev, "%s error %d\n", "write", result);
 		return result;
@@ -435,6 +473,21 @@
 	return 0;
 }
 
+#ifdef DS3231MZ_IRQ_POLL
+static int ds3231_set_time_task(struct device *dev, struct rtc_time *t)
+{
+	struct ds1307	*ds1307 = dev_get_drvdata(dev);
+	if (ds1307->irq_poll) {
+    mutex_lock(&ds1307->poll_mutex);
+    ds1307->set_new_tm = true;
+    ds1307->new_tm     = *t;
+    mutex_unlock(&ds1307->poll_mutex);
+    return 0;
+  }
+  return ds1307_set_time(dev, t);
+}
+#endif
+
 static int ds1337_read_alarm(struct device *dev, struct rtc_wkalrm *t)
 {
 	struct i2c_client       *client = to_i2c_client(dev);
@@ -592,10 +645,9 @@
 #ifdef DS3231MZ_IRQ_POLL
   case RTC_UIE_ON:
     ds1307->irq_poll = true;
-      const u8  ctl_val    = DS1337_BIT_INTCN | DS1337_BIT_A1IE | DS3231_BIT_BBSQW;
       const u32 alarm_mask = 0x80808080; // mask for once a second alarm
       ds1307->write_block_data(client, DS1339_REG_ALARM1_SECS, 4, (const u8*)&alarm_mask);
-   		i2c_smbus_write_byte_data(client, DS1337_REG_CONTROL, ctl_val);
+      ds3231_enable_alarm_int(client);
     break;
   case RTC_UIE_OFF:
     ds1307->irq_poll = false;
@@ -615,7 +667,11 @@
 
 static const struct rtc_class_ops ds13xx_rtc_ops = {
 	.read_time	= ds1307_get_time,
+#ifdef DS3231MZ_IRQ_POLL
+  .set_time	= ds3231_set_time_task,
+#else
 	.set_time	= ds1307_set_time,
+#endif
 	.read_alarm	= ds1337_read_alarm,
 	.set_alarm	= ds1337_set_alarm,
 	.ioctl		= ds1307_ioctl,
@@ -946,7 +1002,8 @@
 
 	if (want_irq) {
 #ifdef DS3231MZ_IRQ_POLL
-    ds1307->irq_poll = false;
+    ds1307->irq_poll   = false;
+    ds1307->set_new_tm = false;
     mutex_init(&ds1307->poll_mutex);
     init_waitqueue_head(&ds1307->wqueue);
 		err = request_irq(client->irq, ds1307_irq, IRQF_TIMER,
